# 1 "mmllexer.mll"
 

  open Lexing
  open Mmlparser

  exception Lexing_error of string

  let keyword_or_ident =
    let h = Hashtbl.create 19 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ ("true", TRUE);
        ("false", FALSE);
        ("not", NOT);
        ("mod", MOD);
        ("mutable", MUTABLE);
        ("if", IF);
        ("then", THEN);
        ("else", ELSE);
        ("fun", FUN);
        ("let", LET);
        ("rec", REC);
        ("in", IN);
        ("type", TYPE);
        ("int", INT);
        ("bool", BOOLEAN);
        ("unit", UNIT);
        ("and", AND);
        ("or", OR);
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
        

# 37 "mmllexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\229\255\230\255\231\255\232\255\233\255\236\255\237\255\
    \238\255\002\000\001\000\017\000\002\000\003\000\247\255\003\000\
    \249\255\250\255\079\000\018\000\002\000\002\000\255\255\253\255\
    \234\255\245\255\244\255\235\255\242\255\241\255\240\255\037\000\
    \252\255\253\255\034\000\039\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\025\000\025\000\012\000\025\000\009\000\255\255\007\000\
    \255\255\255\255\004\000\003\000\016\000\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\002\000\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\022\000\021\000\000\000\021\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\012\000\021\000\000\000\000\000\000\000\010\000\029\000\
    \020\000\008\000\016\000\017\000\023\000\015\000\003\000\014\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\004\000\005\000\011\000\013\000\027\000\026\000\
    \025\000\024\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\037\000\034\000\028\000\035\000\
    \036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\007\000\009\000\006\000\030\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\018\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\021\000\255\255\000\000\255\255\021\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\021\000\255\255\255\255\255\255\000\000\010\000\
    \000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\011\000\012\000\
    \013\000\015\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\034\000\031\000\011\000\031\000\
    \035\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\009\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\018\000\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\031\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "mmllexer.mll"
      ( new_line lexbuf; token lexbuf )
# 166 "mmllexer.ml"

  | 1 ->
# 45 "mmllexer.mll"
      ( token lexbuf )
# 171 "mmllexer.ml"

  | 2 ->
# 47 "mmllexer.mll"
      ( comment lexbuf; token lexbuf )
# 176 "mmllexer.ml"

  | 3 ->
let
# 48 "mmllexer.mll"
              n
# 182 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 49 "mmllexer.mll"
      ( CST(int_of_string n) )
# 186 "mmllexer.ml"

  | 4 ->
let
# 50 "mmllexer.mll"
             id
# 192 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 51 "mmllexer.mll"
     ( keyword_or_ident id )
# 196 "mmllexer.ml"

  | 5 ->
# 53 "mmllexer.mll"
      ( PLUS )
# 201 "mmllexer.ml"

  | 6 ->
# 55 "mmllexer.mll"
      ( STAR )
# 206 "mmllexer.ml"

  | 7 ->
# 57 "mmllexer.mll"
      ( MOINS )
# 211 "mmllexer.ml"

  | 8 ->
# 59 "mmllexer.mll"
      ( DIV )
# 216 "mmllexer.ml"

  | 9 ->
# 61 "mmllexer.mll"
      ( EQ )
# 221 "mmllexer.ml"

  | 10 ->
# 63 "mmllexer.mll"
      ( DEQ )
# 226 "mmllexer.ml"

  | 11 ->
# 65 "mmllexer.mll"
      ( NEQ )
# 231 "mmllexer.ml"

  | 12 ->
# 67 "mmllexer.mll"
      ( LT )
# 236 "mmllexer.ml"

  | 13 ->
# 69 "mmllexer.mll"
      ( LE )
# 241 "mmllexer.ml"

  | 14 ->
# 71 "mmllexer.mll"
      ( AND )
# 246 "mmllexer.ml"

  | 15 ->
# 73 "mmllexer.mll"
      ( OR )
# 251 "mmllexer.ml"

  | 16 ->
# 75 "mmllexer.mll"
     ( LPAR )
# 256 "mmllexer.ml"

  | 17 ->
# 77 "mmllexer.mll"
     ( RPAR )
# 261 "mmllexer.ml"

  | 18 ->
# 79 "mmllexer.mll"
     ( LBRA )
# 266 "mmllexer.ml"

  | 19 ->
# 81 "mmllexer.mll"
     ( RBRA )
# 271 "mmllexer.ml"

  | 20 ->
# 83 "mmllexer.mll"
     ( LARR )
# 276 "mmllexer.ml"

  | 21 ->
# 85 "mmllexer.mll"
     ( RARR )
# 281 "mmllexer.ml"

  | 22 ->
# 87 "mmllexer.mll"
     ( SEMI )
# 286 "mmllexer.ml"

  | 23 ->
# 89 "mmllexer.mll"
     ( DCOMMA )
# 291 "mmllexer.ml"

  | 24 ->
# 91 "mmllexer.mll"
     ( COMMA )
# 296 "mmllexer.ml"

  | 25 ->
# 93 "mmllexer.mll"
      ( raise (Lexing_error ("unknown character : " ^ (lexeme lexbuf))) )
# 301 "mmllexer.ml"

  | 26 ->
# 95 "mmllexer.mll"
      ( EOF )
# 306 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 31
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 99 "mmllexer.mll"
      ( () )
# 318 "mmllexer.ml"

  | 1 ->
# 101 "mmllexer.mll"
      ( comment lexbuf; comment lexbuf )
# 323 "mmllexer.ml"

  | 2 ->
# 103 "mmllexer.mll"
      ( comment lexbuf )
# 328 "mmllexer.ml"

  | 3 ->
# 105 "mmllexer.mll"
      ( raise (Lexing_error "unterminated comment") )
# 333 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

